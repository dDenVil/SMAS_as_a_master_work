int findMedianN(int newVal) {
  static int buffer[NUM_READ];  // статический буфер
  static byte count = 0;    // счётчик
  buffer[count] = newVal;
  if (++count >= NUM_READ) count = 0;  // перемотка буфера
  
  int buf[NUM_READ];    // локальный буфер для медианы
  for (byte i = 0; i < NUM_READ; i++) buf[i] = buffer[i];  
  for (int i = 0; i <= (int) ((NUM_READ / 2) + 1); i++) { // пузырьковая сортировка массива (можно использовать любую)
    for (int m = 0; m < NUM_READ - i - 1; m++) {
      if (buf[m] > buf[m + 1]) {
        int buff = buf[m];
        buf[m] = buf[m + 1];
        buf[m + 1] = buff;
      }
    }
  }
  int ans = 0;
  if (NUM_READ % 2 == 0) {             // кол-во элементов в массиве четное (NUM_READ - последний индекс массива)
    ans = buf[(int) (NUM_READ / 2)];   // берем центральное
  } else {
    ans = (buf[(int) (NUM_READ / 2)] + buf[((int) (NUM_READ / 2)) + 1]) / 2; // берем среднее от двух центральных
  }
  return ans;
}

int midArifm(float newVal) {
  long sum = 0;                       // локальная переменная sum
  for (int i = 0; i < NUM_READ; i++)  // согласно количеству усреднений
    sum += newVal;                  // суммируем значения с любого датчика в переменную sum
  return ((float)sum / NUM_READ);
}

// бегущее среднее с адаптивным коэффициентом
float expRunningAverageAdaptive(float newVal) {
  static float filVal = 0;
  float p;
  // резкость фильтра зависит от модуля разности значений
  if (abs(newVal - filVal) > coef) p = 0.7;
  else p =0.05 ; //0.05
  
  filVal += (newVal - filVal) * p;
  return filVal;
}
// медиана на 3 значения со своим буфером
int median(int newVal) {
  static int buf[3];
  static byte count = 0;
  buf[count] = newVal;
  if (++count >= 3) count = 0;
  return (max(buf[0], buf[1]) == max(buf[1], buf[2])) ? max(buf[0], buf[2]) : max(buf[1], min(buf[0], buf[2]));
}
// оптимальное бегущее среднее арифметическое
float runMiddleArifmOptim(float newVal) {
  static int t = 0;
  static float vals[NUM_READ];
  static float average = 0;
  if (++t >= NUM_READ) t = 0; // перемотка t
  average -= vals[t];         // вычитаем старое
  average += newVal;          // прибавляем новое
  vals[t] = newVal;           // запоминаем в массив
  return ((float)average / NUM_READ);
}

// бегущее среднее арифметическое   для пульса (10 пульсаций)
float runMiddleArifm(float newVal) {  // принимает новое значение
  static byte idx = 0;                // индекс
  static float valArray[10];    // массив
  valArray[idx] = newVal;             // пишем каждый раз в новую ячейку
  if (++idx >= 10) idx = 0;     // перезаписывая самое старое значение
  float average = 0;                  // обнуляем среднее
  for (int i = 0; i < 10; i++) {
  average += valArray[i];           // суммируем
  }
  return (float)average / 10;   // возвращаем
  delay(1);
}


// exp бегущее среднее 
// float k = 0.4;  // коэффициент фильтрации, 0.0-1.0
float expRunningAverage(float newVal) {
  static float filVal = 0;
  filVal += (newVal - filVal) * k;
  return filVal;
}


//float _err_measure = 15;  // примерный шум измерений
//float _q = 0.4;   // скорость изменения значений 0.001-1, варьировать самому
float simpleKalman(float newVal) {
  float _kalman_gain, _current_estimate;
  static float _err_estimate = _err_measure;
  static float _last_estimate;
  _kalman_gain = (float)_err_estimate / (_err_estimate + _err_measure);
  _current_estimate = _last_estimate + (float)_kalman_gain * (newVal - _last_estimate);
  _err_estimate =  (1.0 - _kalman_gain) * _err_estimate + fabs(_last_estimate - _current_estimate) * _q;
  _last_estimate = _current_estimate;
  return _current_estimate;
}


//----------------------------------------------------------------------------------------------------------------------------

void GetHeartRate() {

 // unsigned long currentMillisGetHR = millis();
 // if (currentMillisGetHR - previousMillisGetHR >= 10) {
 //   previousMillisGetHR = currentMillisGetHR;
 // }

  unsigned long currentMillisResultHR = millis();

  if (currentMillisResultHR - previousMillisResultHR >= 2000) {
    previousMillisResultHR = currentMillisResultHR;
    display.fillRect(16, 46, 112, 18, BLACK);
    display.drawBitmap(0, 47, Heart_Icon, 16, 16, WHITE);
    //display.drawLine(0, 43, 127, 43, WHITE); //--> drawLine(x1, y1, x2, y2, color)
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(20, 48); //--> (x position, y position)
    display.print(BPM); 
    display.setTextSize(1);
    display.print(" BPM");
    display.drawBitmap(76, 47, moon, 16, 16, WHITE);
    display.drawBitmap(100, 47, alarm, 16, 16, WHITE);
    display.display(); 

  }
 
}
//--------------------------------------------------------------------------------


void DrawGraph(int SensorSignal) {
  if (x > 127) {
    display.fillRect(0, 0, 128, 42, BLACK);
    x = 0;
    lastx = 0;
  }
  //int ySignal = SensorSignal; 
  if (SensorSignal < -600) SensorSignal = -600;
  if (SensorSignal > 1200) SensorSignal = 1200;
  int ySignalMap = map(SensorSignal, -600, 1200, 0, 40);
    y = 40 - ySignalMap;
  display.writeLine(lastx,lasty,x,y,WHITE);
  display.display(); 
  lastx = x;
  lasty = y;
    x++;
}
//---------------------------------------------------------------------------------------------------------------------------------------------------------------
void heartclick() {
  if (pulse==1000) {
     display.fillRect(0, 47, 16, 16, BLACK);
     display.display(); 
     display.drawBitmap(0, 47, Heart_Icon, 16, 16, WHITE);
     display.display(); 
  }
}

//-----------------------------------------------------------------------------------------

  

void eyes() {
static const uint8_t PROGMEM eyes1[] =
{
  0x00, 0x3f, 0xc0, 0x01, 0xf8, 0x00,
  0x00, 0xff, 0xf0, 0x07, 0xff, 0x00,
  0x03, 0xff, 0xf8, 0x1f, 0xff, 0x80,
  0x07, 0xff, 0xfc, 0x1f, 0xff, 0xe0,
  0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0,
  0x1f, 0xff, 0xfe, 0x7f, 0xff, 0xf8,
  0x1f, 0xff, 0xfe, 0x7f, 0xff, 0xf8,
  0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xfc,
  0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xfc,
  0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xfe,
  0x7f, 0xfe, 0x3e, 0x78, 0xff, 0xfe,
  0x7f, 0xfe, 0x3e, 0x78, 0xff, 0xfe,
  0xff, 0xfe, 0x3e, 0x78, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff,
  0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xfe,
  0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xfe,
  0x7f, 0xff, 0xf8, 0x1f, 0xff, 0xfe,
  0x7f, 0xff, 0xf0, 0x1f, 0xff, 0xfe,
  0x3f, 0xff, 0xf0, 0x0f, 0xff, 0xfc,
  0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc,
  0x0f, 0xff, 0x80, 0x03, 0xff, 0xf8,
  0x07, 0xff, 0x00, 0x00, 0xff, 0xf0,
  0x01, 0xf8, 0x00, 0x00, 0x3f, 0xc0
};

static const uint8_t PROGMEM eyes2[] =
{
  0x00, 0x3f, 0xc0, 0x01, 0xf8, 0x00,   //48x24
  0x00, 0xff, 0xf0, 0x07, 0xff, 0x00,
  0x03, 0xff, 0xf8, 0x1f, 0xff, 0x80,
  0x07, 0xff, 0xfc, 0x1f, 0xff, 0xe0,
  0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xf0,
  0x1f, 0xff, 0xfe, 0x7f, 0xff, 0xf8,
  0x1f, 0xff, 0xfe, 0x7f, 0xff, 0xf8,
  0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xfc,
  0x3f, 0xff, 0xfe, 0x7f, 0xff, 0xfc,
  0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xfe,
  0x7f, 0xff, 0xc6, 0x7f, 0x1f, 0xfe,
  0x7f, 0xff, 0xc6, 0x7f, 0x1f, 0xfe,
  0xff, 0xff, 0xc6, 0x7f, 0x1f, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff,
  0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xfe,
  0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xfe,
  0x7f, 0xff, 0xf8, 0x1f, 0xff, 0xfe,
  0x7f, 0xff, 0xf0, 0x1f, 0xff, 0xfe,
  0x3f, 0xff, 0xf0, 0x0f, 0xff, 0xfc,
  0x1f, 0xff, 0xe0, 0x07, 0xff, 0xfc,
  0x0f, 0xff, 0x80, 0x03, 0xff, 0xf8,
  0x07, 0xff, 0x00, 0x00, 0xff, 0xf0,
  0x01, 0xf8, 0x00, 0x00, 0x3f, 0xc0
};


  display.clearDisplay();
  display.drawBitmap(40, 24, eyes1, 48, 24, 1);
  display.display();
  delay(2000);

  display.clearDisplay();
  display.drawBitmap(40, 24, eyes2, 48, 24, 1);
  display.display();
  delay(2000);

 }

//--------------------------------------------------------------------------------

void heart(void) {

 static const unsigned char PROGMEM love [] =
 {    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x7f, 0xf8, 0x00, //64x64
0x00, 0x1f, 0xff, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x07, 0xff, 0xff, 0x00, 
0x01, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xc0, 
0x03, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xf0, 
0x0f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xf8, 
0x1f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const unsigned char PROGMEM love2 [] =
 { // '56358634', 52x52px
0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xff, 
0xf8, 0x01, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x03, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xfe, 0x07, 
0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x9f, 0xff, 0xff, 
0x80, 0x1f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 
0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 
0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

static const unsigned char PROGMEM love3 [] =
 {// '56358634', 16x16px
0x18, 0x38, 0x7e, 0x7e, 0x7f, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 
0x3f, 0xfc, 0x1f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00};

static const unsigned char PROGMEM logo [] = 
 {// 'logo3', 48x48px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 
0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0x00, 0x7c, 0x00, 0x01, 0xff, 
0xf8, 0x00, 0x1e, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x07, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x03, 0x00, 
0x07, 0xff, 0x80, 0x7f, 0x81, 0x80, 0x07, 0xff, 0x03, 0xff, 0xf0, 0x80, 0x07, 0xfe, 0x0f, 0xff, 
0xfc, 0x00, 0x0f, 0xfe, 0x1f, 0xff, 0xfe, 0x00, 0x0f, 0xfc, 0x7f, 0xff, 0xff, 0x00, 0x0f, 0xfc, 
0x7f, 0xff, 0xff, 0x80, 0x0f, 0xf8, 0xf8, 0x1f, 0xff, 0xc0, 0x1f, 0xf8, 0xf0, 0x0f, 0xff, 0xc0, 
0x1f, 0xf8, 0xf1, 0xc7, 0xff, 0xc0, 0x1f, 0xf9, 0xf3, 0xe7, 0xff, 0xc0, 0x0f, 0xf9, 0xff, 0xe7, 
0xff, 0xe0, 0x0f, 0xf8, 0xff, 0xe3, 0xff, 0xc0, 0x0f, 0xf8, 0xff, 0xe3, 0xff, 0xc0, 0x0f, 0xf8, 
0xff, 0xe3, 0xff, 0xc0, 0x0f, 0xf8, 0x7f, 0xe7, 0xff, 0xc0, 0x07, 0xf8, 0x3f, 0xc7, 0xff, 0x80, 
0x07, 0xfc, 0x1f, 0x87, 0xff, 0x80, 0x03, 0xfc, 0x06, 0x0f, 0xff, 0x00, 0x03, 0xfe, 0x00, 0x0f, 
0xff, 0x00, 0x01, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0xff, 0x80, 0x3f, 0xfc, 0x00, 0x00, 0xff, 
0xf1, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xfe, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};



  
 // display.clearDisplay();
 //  display.setTextSize(5);      // Normal 1:1 pixel scale
 // display.setTextColor(SSD1306_WHITE); // Draw white text
 // display.setCursor(28, 5);     // Start at top-left corner
 // display.cp437(true);         // Use full 256 char 'Code Page 437' font
 // display.write(3);
 // display.invertDisplay(true);
  
  display.clearDisplay();
  display.drawBitmap((display.width()  - 48 ) / 2, 1, logo, 48, 48, 1);
  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(40,48);             // Start at top-left corner         //128x64
  display.println(F("SMAS"));
  
  display.display();
  delay(2000);
  display.clearDisplay();

  
  for(int i=0;i<=3;i++){
  display.drawBitmap((display.width()  - 64 ) / 2, (display.height() - 64) / 2, love, 64, 64, 1);
  display.display();
  delay(200);
  display.clearDisplay();
  display.drawBitmap((display.width()  - 52 ) / 2, (display.height() - 52) / 2, love2, 52, 52, 1);
  display.display();
  delay(600);
  }
}

//--------------------------------------------------------------------------------
void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}
//--------------------------------------------------------------------------------
void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(20000);
}
//--------------------------------------------------------------------------------
void testdrawstyles(void) {
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Hello, world!"));

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
}
//--------------------------------------------------------------------------------
void testscrolltext(void) {
  display.clearDisplay();

  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
  display.display();      // Show initial text
  delay(100);

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
  delay(1000);
}